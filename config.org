
* Configuration start

** Preliminaries

We have to be sure to set ~lexical-binding~ in the file header to opt into Emacs lexical scope. Emacs Lisp really isn't the worst language once you pull in the community's /de facto/ standard libraries, but you need lexical scope.

#+begin_src emacs-lisp
  ;; -*- coding: utf-8; lexical-binding: t -*-
#+end_src

#+begin_src emacs-lisp
  (require 'use-package)
#+end_src

Many of Emacs's defaults are ill-suited for my purposes, but the first one that needs fixing is the shockingly low garbage-collection threshold, which defaults to a paltry *:8kb*. Setting it to *:100mb* seems to strike a nice balance between GC pauses and performance. We also need to bump the number of bindings/unwind-protects (~max-specpdl-size~).

#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq max-specpdl-size 5000)
#+end_src

The most useful Emacs command is ~execute-extended-command~. It should be painless to access from the home row. (~bind-key*~ ensures that this setting is propagated through all major modes, which saves us a bunch of ~unbind-key~ calls in ~use-package~ stanzas.) Why not something even easier, like ~C-;~, you ask? Unfortunately, macOS Terminal.app swallows that keybinding and does nothing with it. I'm sure this is correct behavior by some sort of standard, but I have to work around it, since occasionally I do use Emacs in the terminal.

#+begin_src emacs-lisp
  (bind-key* "C-c ;" #'execute-extended-command)
  (bind-key* "C-c 4" #'execute-extended-command) ;; for a purely left-handed combo
  (bind-key* "C-c C-;" #'execute-extended-command-for-buffer)
#+end_src

Also we would like some quick access to fin files commands

#+begin_src emacs-lisp
  (define-key global-map "\ef" 'find-file)
  (define-key global-map "\eF" 'find-file-other-window)

  (define-key global-map "\eb" 'ido-switch-buffer)
  (define-key global-map "\eB" 'ido-switch-buffer-other-window)
#+end_src


Since subsequent packages like ~libgit~ may depend on executables like ~cmake~, we need to ensure that Emacs has access to the PATH associated with the current environment.

#+begin_src emacs-lisp
  ;; exec-path-from shell was misbehaving, this hack seems to mollify it
  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize))
#+end_src

With this auxiliary package for ~use-package~, we can instruct Emacs that a given package depends on the presence of a system tool. It will even install this tool with the system's recommended package manager.

#+begin_src emacs-lisp
  (use-package use-package-ensure-system-package)
#+end_src

The ~try~ package lets me try out a new Emacs package without it cluttering up my system permanently.

#+begin_src emacs-lisp
  (use-package try)
#+end_src

** Fixing defaults

Fixing Emacs's defaults is a nontrivial problem. We'll start with UI concerns.

#+begin_src emacs-lisp
    ;; Fixing emacs defaults
    (setq
     ;; No need to see GNU agitprop.
     inhibit-startup-screen t
     ;; No need to remind me what a scratch buffer is.
     initial-scratch-message nil
     ;; Double-spaces after periods is morally wrong.
     sentence-end-double-space nil
     ;; Never ding at me, ever.
     ring-bell-function 'ignore
     ;; Save existing clipboard text into the kill ring before replacing it.
     save-interprogram-paste-before-kill t
     ;; Prompts should go in the minibuffer, not in a GUI.
     use-dialog-box nil
     ;; Fix undo in commands affecting the mark.
     mark-even-if-inactive nil
     ;; Let C-k delete the whole line.
     kill-whole-line t
     ;; search should be case-sensitive by default
     case-fold-search nil
     ;; accept 'y' or 'n' instead of yes/no
     ;; the documentation advises against setting this variable
     ;; the documentation can get bent imo
     use-short-answers t
     ;; my source directory
     default-directory "C:/dev"
     ;; eke out a little more scrolling performance
     fast-but-imprecise-scrolling t
     ;; prefer newer elisp files
     load-prefer-newer t
     ;; when I say to quit, I mean quit
     confirm-kill-processes nil
     ;; if native-comp is having trouble, there's not very much I can do
     native-comp-async-report-warnings-errors 'silent
     ;; unicode ellipses are better
     truncate-string-ellipsis "..."
     ;; I want to close these fast, so switch to it so I can just hit 'q'
     help-window-select t
     ;; this certainly can't hurt anything
     delete-by-moving-to-trash t
     ;; keep the point in the same place while scrolling
     scroll-preserve-screen-position t
     ;; More dynamic scroll
     scroll-step 3
     ;; more info in completions
     completions-detailed t
     ;; highlight error messages more aggressively
     next-error-message-highlight t
     ;; don't let the minibuffer muck up my window tiling
     read-minibuffer-restore-windows t
     ;; scope save prompts to individual projects
     save-some-buffers-default-predicate 'save-some-buffers-root
     ;; don't keep duplicate entries in kill ring
     kill-do-not-save-duplicates t
     ;; Save last known place in file
     save-place-mode 1
     ;; Reset recent files
     recentf-mode 1
     ;; History mode
     history-lenght 25
     ;; Save hist mode
     savehist-mode 1

     )

  ;; Never mix tabs and spaces. Never use tabs, period.
  ;; We need the setq-default here because this becomes
  ;; a buffer-local variable when set.
  (setq-default indent-tabs-mode nil)

#+end_src

It's good that Emacs supports the wide variety of file encodings it does, but UTF-8 should always, /always/ be the default.

#+begin_src emacs-lisp
  (set-charset-priority 'unicode)
  (prefer-coding-system 'utf-8-unix)
#+end_src

There are a great many keybindings that are actively hostile, in that they are bound to useless or obsolete functions that are really easy to trigger accidentally. (The lambda is because ~unbind-key~ is a macro.)

#+begin_src emacs-lisp
  (defun pt/unbind-bad-keybindings ()
    "Remove unhelpful keybindings."
    (-map (lambda (x) (unbind-key x)) '("C-x C-f" ;; find-file-read-only
                                        "C-x C-d" ;; list-directory
                                        "C-z" ;; suspend-frame
                                        "C-x C-z" ;; again
                                        "<mouse-2>" ;; pasting with mouse-wheel click
                                        "<C-wheel-down>" ;; text scale adjust
                                        "<C-wheel-up>" ;; ditto
                                        "s-n" ;; make-frame
                                        "s-t" ;; ns-popup-font-panel
                                        "s-p" ;; ns-print-buffer
                                        "C-x C-q" ;; read-only-mode
                                        )))
#+end_src

These libraries are helpful to have around when writing little bits of elisp, like the above. You can't possibly force me to remember the difference between the ~mapcar~, ~mapc~, ~mapcan~, ~mapconcat~, the ~cl-~ versions of some of the aforementioned, and ~seq-map~. I refuse. ~shut-up~ is good for noisy packages.

#+begin_src emacs-lisp
  (use-package s)
  (use-package dash :config (pt/unbind-bad-keybindings))
  (use-package shut-up)
#+end_src

Emacs can jump between header files and implementation files, or implementations and tests, as needed.

#+begin_src emacs-lisp
  (bind-key "M-o" #'ff-find-related-file)
#+end_src

Searching should be done with isearch, for UI purposes.

#+begin_src emacs-lisp
  (bind-key "C-s" #'isearch-forward-regexp)
  (bind-key "C-c s" #'isearch-forward-symbol)
#+end_src

By default, Emacs wraps long lines, inserting a little icon to indicate this. I find this a bit naff. What we can do to mimic more modern behavior is to allow line truncation by default, but also allow touchpad-style scrolling of the document.

#+begin_src emacs-lisp
  (setq mouse-wheel-tilt-scroll t
        mouse-wheel-flip-direction t)
  (setq-default truncate-lines t)
#+end_src

I never want to quit if readme.org is in a bad state. This warns me should I accidentally do so.

#+begin_src emacs-lisp
  (defun check-config ()
    "Warn if exiting Emacs with a config.org that doesn't load."
    (or
     (ignore-errors (org-babel-load-file "~/.emacs.d/config.org"))
     (y-or-n-p "Configuration file may be malformed: really exit?")))

  (push #'check-config kill-emacs-query-functions)
#+end_src

Setup default buffer configuration

#+begin_src emacs-lisp
(defun nm-ediff-setup-windows (buffer-A buffer-B buffer-C control-buffer)
  (ediff-setup-windows-plain buffer-A buffer-B buffer-C control-buffer)
)
(setq ediff-window-setup-function 'nm-ediff-setup-windows)
(setq ediff-split-window-function 'split-window-horizontally)
#+end_src

Never split a window

#+begin_src emacs-lisp
(setq split-window-preferred-function nil)
#+end_src

** Basic Key Bindings
** Visuals

It's a mystery why Emacs doesn't allow colors by default in its compilation buffer, but ~fancy-compilation~ addresses that (and ensures the background color is set to something dark so that programs that make assumptions about its colors don't break).

#+begin_src emacs-lisp
  (use-package fancy-compilation :config (fancy-compilation-mode))
#+end_src

** Fonts and Icons
Emacs looks a lot better when it has a modern monospaced font and VSCode-esque icons, as well as smooth scrolling.

#+begin_src emacs-lisp
          (set-face-attribute 'default nil
                              :font "Menlo-13"
                              :height 110
                              :weight 'Medium)

          (set-face-attribute 'variable-pitch nil
                              :font "SF Mono-12"
                              :height 110
                              :weight 'Medium)

          (set-face-attribute 'fixed-pitch nil
                              :font "Menlo-13"
                              :height 110
                              :weight 'Medium)

          (set-face-attribute 'font-lock-comment-face nil
                              :slant 'italic)
  
          (set-face-attribute 'font-lock-keyword-face nil
                              :slant 'italic)

          (add-to-list 'default-frame-alist '(font . "Menlo-13"))
#+end_src

Set Icons
#+begin_src emacs-lisp
  (let ((installed (package-installed-p 'all-the-icons)))
    (use-package all-the-icons)
    (unless installed (all-the-icons-install-fonts)))

  (use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Screen
Every Emacs window should, by default occupy all the screen space it can.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Themes
I use the [[https://github.com/hlissner/emacs-doom-themes][Doom Emacs themes]], which are gorgeous. I sometimes also use Modus Vivendi, the excellent new theme that now ships with Emacs.

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (let ((chosen-theme 'doom-material-dark))
      (doom-themes-visual-bell-config)
      (doom-themes-org-config)
      (setq doom-challenger-deep-brighter-comments t
            doom-challenger-deep-brighter-modeline t
            doom-rouge-brighter-comments t
            doom-ir-black-brighter-comments t
            modus-themes-org-blocks 'gray-background
            doom-dark+-blue-modeline nil)
      (load-theme chosen-theme t)))
#+end_src

** Buffers
Compilation buffers should wrap their lines.

#+begin_src emacs-lisp
  (add-hook 'compilation-mode-hook 'visual-line-mode)
#+end_src

URLs should be highlighted and linkified.

#+begin_src emacs-lisp
    (global-goto-address-mode)
#+end_src

** Graphical User Interface tweaks

*** Menu Bar, Tool Bar and Scroll Bar
#+begin_src emacs-lisp
  (tool-bar-mode 1)
  (scroll-bar-mode -1)
  (menu-bar-mode 1)
#+end_src

*** Display Line Numbers and Truncated Lines

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

** Modules and Packages
*** Tree-sitter

[[https://tree-sitter.github.io][~tree-sitter~]] parsing toolkit. Pleasingly enough, the parsers generated by ~tree-sitter~ can be used to spruce up syntax highlighting within Emacs: for example,
highlighting Python with ~emacs-tree-sitter~ will correctly highlight code inside format strings,
which is really quite useful. Note that for this to work you have to add the tree-sitter ELPA server.

#+begin_src emacs-lisp
;; (shut-up
;;   (use-package tree-sitter
;;     :config (global-tree-sitter-mode))
;;
;;   (use-package tree-sitter-langs))
#+end_src

*** Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " → "))
#+end_src

** Startup Windowing
#+begin_src emacs-lisp
  (setq next-line-add-newlines nil)
  (setq-default truncate-lines t)
  (setq truncate-partial-width-windows nil)
  (split-window-horizontally)
#+end_src



** Modes

*** Org Mode

#+begin_src emacs-lisp
(setq org-support-shift-select t)

#+end_src

** Miscelaneous

#+begin_src emacs-lisp
  ;; Clock
  (display-time)
#+end_src
